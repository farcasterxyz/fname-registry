name: CD
on:
  push:
    branches: [main]

jobs:
  publish:
    concurrency: fname-registry-publish
    timeout-minutes: 30
    runs-on: buildjet-2vcpu-ubuntu-2204-arm

    steps:
      - uses: actions/checkout@v4

      # Build image with Depot and push it to AWS ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          mask-aws-account-id: no
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker image tag for fname-registry
        id: image-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: farcasterxyz/fname-registry
          IMAGE_TAG: ${{ github.sha }}
        run: echo "::set-output name=image-tag::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        shell: bash

      - uses: depot/setup-action@v1

      - uses: depot/build-push-action@v1
        with:
          buildx-fallback: true
          project: ${{ secrets.DEPOT_PROJECT_ID }}
          token: ${{ secrets.DEPOT_TOKEN }}
          context: .
          file: ./Dockerfile
          platforms: "linux/arm64"
          tags: ${{ steps.image-tag.outputs.image-tag }}
          github-token: ${{ secrets.github_token }}
          push: true

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
        shell: bash

      # Deploy the image to ECS one hub at a time to minimize overall downtime
      - name: Generate release ID
        id: release
        run: echo "::set-output name=release::$(date +'%Y-%m-%d-%H-%M')-$(git rev-parse --short HEAD)"
        shell: bash

      - name: Update task-definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/fname-registry-api.json
          container-name: fname-registry-api
          image: ${{ steps.image-tag.outputs.image-tag }}

      - name: Push task-definition to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: fname-registry-api
          cluster: fname-registry-cluster
          wait-for-service-stability: true
