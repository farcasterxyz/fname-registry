name: Release
on:
  push:
    branches: [main]

concurrency:
  group: fname-registry-deploy
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write # AWS OIDC

jobs:
  build:
    env:
      DOCKER_IMAGE: "526236635984.dkr.ecr.us-east-1.amazonaws.com/farcasterxyz/fname-registry:${{ github.sha }}"
    timeout-minutes: 15
    runs-on: ['runs-on=${{ github.run_id }}', 'runner=2cpu-linux-arm64']
    outputs:
      docker-image: ${{ env.DOCKER_IMAGE }}

    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::526236635984:role/github-actions-workflow-farcasterxyz-fname-registry
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - id: docker-image
        uses: ./.github/actions/build
        with:
          dockerhub-user: ${{ vars.FARCASTERXYZ_DOCKER_HUB_USER }}
          dockerhub-password: ${{ secrets.FARCASTERXYZ_DOCKER_HUB_TOKEN }}
          dockerfile: ./Dockerfile
          depot: false # TODO: Enable once OIDC connection is fixed
          image-tag: ${{ env.DOCKER_IMAGE }}
          context: .
          platforms: 'linux/arm64'
          push: true

  deploy:
    needs: build
    timeout-minutes: 15
    runs-on: ['runs-on=${{ github.run_id }}', 'runner=1cpu-linux-arm64']
    steps:
      - uses: warpcast/remote-exec@v1.2.3
        with:
          git-repo: ${{ github.repository }}
          git-ref: ${{ github.sha }}
          docker-image: ${{ needs.build.outputs.image-tag }}
          command: deploy
          project: fname-registry
          ssh-key: ${{ secrets.STACK_DEPLOY_SSH_PRIVATE_KEY }}
