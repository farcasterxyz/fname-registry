/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common.js';

export interface IdRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'acceptOwnership'
      | 'changeRecoveryAddress'
      | 'disableTrustedOnly'
      | 'eip712Domain'
      | 'idOf'
      | 'nonces'
      | 'owner'
      | 'pauseRegistration'
      | 'paused'
      | 'pendingOwner'
      | 'recover'
      | 'register'
      | 'registerFor'
      | 'renounceOwnership'
      | 'setTrustedCaller'
      | 'transfer'
      | 'transferOwnership'
      | 'trustedCaller'
      | 'trustedRegister'
      | 'unpauseRegistration'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ChangeRecoveryAddress'
      | 'DisableTrustedOnly'
      | 'EIP712DomainChanged'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'Register'
      | 'SetTrustedCaller'
      | 'Transfer'
      | 'Unpaused'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeRecoveryAddress', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'disableTrustedOnly', values?: undefined): string;
  encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;
  encodeFunctionData(functionFragment: 'idOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'nonces', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseRegistration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recover', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'register', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'registerFor',
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setTrustedCaller', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'trustedCaller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'trustedRegister', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'unpauseRegistration', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRecoveryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableTrustedOnly', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'idOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseRegistration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTrustedCaller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'trustedCaller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'trustedRegister', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseRegistration', data: BytesLike): Result;
}

export namespace ChangeRecoveryAddressEvent {
  export type InputTuple = [id: BigNumberish, recovery: AddressLike];
  export type OutputTuple = [id: bigint, recovery: string];
  export interface OutputObject {
    id: bigint;
    recovery: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableTrustedOnlyEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterEvent {
  export type InputTuple = [to: AddressLike, id: BigNumberish, recovery: AddressLike];
  export type OutputTuple = [to: string, id: bigint, recovery: string];
  export interface OutputObject {
    to: string;
    id: bigint;
    recovery: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedCallerEvent {
  export type InputTuple = [oldCaller: AddressLike, newCaller: AddressLike, owner: AddressLike];
  export type OutputTuple = [oldCaller: string, newCaller: string, owner: string];
  export interface OutputObject {
    oldCaller: string;
    newCaller: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, id: BigNumberish];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IdRegistry;
  waitForDeployment(): Promise<this>;

  interface: IdRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  changeRecoveryAddress: TypedContractMethod<[recovery: AddressLike], [void], 'nonpayable'>;

  disableTrustedOnly: TypedContractMethod<[], [void], 'nonpayable'>;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    'view'
  >;

  idOf: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pauseRegistration: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  recover: TypedContractMethod<
    [from: AddressLike, to: AddressLike, deadline: BigNumberish, sig: BytesLike],
    [void],
    'nonpayable'
  >;

  register: TypedContractMethod<[recovery: AddressLike], [bigint], 'nonpayable'>;

  registerFor: TypedContractMethod<
    [to: AddressLike, recovery: AddressLike, deadline: BigNumberish, sig: BytesLike],
    [bigint],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setTrustedCaller: TypedContractMethod<[_trustedCaller: AddressLike], [void], 'nonpayable'>;

  transfer: TypedContractMethod<[to: AddressLike, deadline: BigNumberish, sig: BytesLike], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  trustedCaller: TypedContractMethod<[], [string], 'view'>;

  trustedRegister: TypedContractMethod<[to: AddressLike, recovery: AddressLike], [bigint], 'nonpayable'>;

  unpauseRegistration: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'acceptOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'changeRecoveryAddress'
  ): TypedContractMethod<[recovery: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'disableTrustedOnly'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'eip712Domain'): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'idOf'): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'nonces'): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'pauseRegistration'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(nameOrSignature: 'pendingOwner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'recover'
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, deadline: BigNumberish, sig: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'register'): TypedContractMethod<[recovery: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'registerFor'
  ): TypedContractMethod<
    [to: AddressLike, recovery: AddressLike, deadline: BigNumberish, sig: BytesLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setTrustedCaller'
  ): TypedContractMethod<[_trustedCaller: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<[to: AddressLike, deadline: BigNumberish, sig: BytesLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'trustedCaller'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'trustedRegister'
  ): TypedContractMethod<[to: AddressLike, recovery: AddressLike], [bigint], 'nonpayable'>;
  getFunction(nameOrSignature: 'unpauseRegistration'): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'ChangeRecoveryAddress'
  ): TypedContractEvent<
    ChangeRecoveryAddressEvent.InputTuple,
    ChangeRecoveryAddressEvent.OutputTuple,
    ChangeRecoveryAddressEvent.OutputObject
  >;
  getEvent(
    key: 'DisableTrustedOnly'
  ): TypedContractEvent<
    DisableTrustedOnlyEvent.InputTuple,
    DisableTrustedOnlyEvent.OutputTuple,
    DisableTrustedOnlyEvent.OutputObject
  >;
  getEvent(
    key: 'EIP712DomainChanged'
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferStarted'
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'Register'
  ): TypedContractEvent<RegisterEvent.InputTuple, RegisterEvent.OutputTuple, RegisterEvent.OutputObject>;
  getEvent(
    key: 'SetTrustedCaller'
  ): TypedContractEvent<
    SetTrustedCallerEvent.InputTuple,
    SetTrustedCallerEvent.OutputTuple,
    SetTrustedCallerEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

  filters: {
    'ChangeRecoveryAddress(uint256,address)': TypedContractEvent<
      ChangeRecoveryAddressEvent.InputTuple,
      ChangeRecoveryAddressEvent.OutputTuple,
      ChangeRecoveryAddressEvent.OutputObject
    >;
    ChangeRecoveryAddress: TypedContractEvent<
      ChangeRecoveryAddressEvent.InputTuple,
      ChangeRecoveryAddressEvent.OutputTuple,
      ChangeRecoveryAddressEvent.OutputObject
    >;

    'DisableTrustedOnly()': TypedContractEvent<
      DisableTrustedOnlyEvent.InputTuple,
      DisableTrustedOnlyEvent.OutputTuple,
      DisableTrustedOnlyEvent.OutputObject
    >;
    DisableTrustedOnly: TypedContractEvent<
      DisableTrustedOnlyEvent.InputTuple,
      DisableTrustedOnlyEvent.OutputTuple,
      DisableTrustedOnlyEvent.OutputObject
    >;

    'EIP712DomainChanged()': TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    'Register(address,uint256,address)': TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;
    Register: TypedContractEvent<RegisterEvent.InputTuple, RegisterEvent.OutputTuple, RegisterEvent.OutputObject>;

    'SetTrustedCaller(address,address,address)': TypedContractEvent<
      SetTrustedCallerEvent.InputTuple,
      SetTrustedCallerEvent.OutputTuple,
      SetTrustedCallerEvent.OutputObject
    >;
    SetTrustedCaller: TypedContractEvent<
      SetTrustedCallerEvent.InputTuple,
      SetTrustedCallerEvent.OutputTuple,
      SetTrustedCallerEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  };
}
