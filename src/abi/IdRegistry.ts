/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common.js';

export interface IdRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'cancelRecovery'
      | 'changeHome'
      | 'changeRecoveryAddress'
      | 'changeTrustedCaller'
      | 'completeRecovery'
      | 'completeTransferOwnership'
      | 'disableTrustedOnly'
      | 'idOf'
      | 'isTrustedForwarder'
      | 'owner'
      | 'register'
      | 'renounceOwnership'
      | 'requestRecovery'
      | 'requestTransferOwnership'
      | 'transfer'
      | 'transferOwnership'
      | 'trustedRegister'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'CancelRecovery'
      | 'ChangeHome'
      | 'ChangeRecoveryAddress'
      | 'ChangeTrustedCaller'
      | 'DisableTrustedOnly'
      | 'OwnershipTransferred'
      | 'Register'
      | 'RequestRecovery'
      | 'Transfer'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'cancelRecovery', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'changeHome', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeRecoveryAddress', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'changeTrustedCaller', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'completeRecovery', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'completeTransferOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableTrustedOnly', values?: undefined): string;
  encodeFunctionData(functionFragment: 'idOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'register', values: [AddressLike, AddressLike, string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestRecovery', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'requestTransferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'trustedRegister', values: [AddressLike, AddressLike, string]): string;

  decodeFunctionResult(functionFragment: 'cancelRecovery', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeHome', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRecoveryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeTrustedCaller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'completeRecovery', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'completeTransferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableTrustedOnly', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'idOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestRecovery', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestTransferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'trustedRegister', data: BytesLike): Result;
}

export namespace CancelRecoveryEvent {
  export type InputTuple = [by: AddressLike, id: BigNumberish];
  export type OutputTuple = [by: string, id: bigint];
  export interface OutputObject {
    by: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeHomeEvent {
  export type InputTuple = [id: BigNumberish, url: string];
  export type OutputTuple = [id: bigint, url: string];
  export interface OutputObject {
    id: bigint;
    url: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeRecoveryAddressEvent {
  export type InputTuple = [id: BigNumberish, recovery: AddressLike];
  export type OutputTuple = [id: bigint, recovery: string];
  export interface OutputObject {
    id: bigint;
    recovery: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeTrustedCallerEvent {
  export type InputTuple = [trustedCaller: AddressLike];
  export type OutputTuple = [trustedCaller: string];
  export interface OutputObject {
    trustedCaller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableTrustedOnlyEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterEvent {
  export type InputTuple = [to: AddressLike, id: BigNumberish, recovery: AddressLike, url: string];
  export type OutputTuple = [to: string, id: bigint, recovery: string, url: string];
  export interface OutputObject {
    to: string;
    id: bigint;
    recovery: string;
    url: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestRecoveryEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, id: BigNumberish];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, id: BigNumberish];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IdRegistry;
  waitForDeployment(): Promise<this>;

  interface: IdRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  cancelRecovery: TypedContractMethod<[from: AddressLike], [void], 'nonpayable'>;

  changeHome: TypedContractMethod<[url: string], [void], 'nonpayable'>;

  changeRecoveryAddress: TypedContractMethod<[recovery: AddressLike], [void], 'nonpayable'>;

  changeTrustedCaller: TypedContractMethod<[_trustedCaller: AddressLike], [void], 'nonpayable'>;

  completeRecovery: TypedContractMethod<[from: AddressLike], [void], 'nonpayable'>;

  completeTransferOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  disableTrustedOnly: TypedContractMethod<[], [void], 'nonpayable'>;

  idOf: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  isTrustedForwarder: TypedContractMethod<[forwarder: AddressLike], [boolean], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  register: TypedContractMethod<[to: AddressLike, recovery: AddressLike, url: string], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  requestRecovery: TypedContractMethod<[from: AddressLike, to: AddressLike], [void], 'nonpayable'>;

  requestTransferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  transfer: TypedContractMethod<[to: AddressLike], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[arg0: AddressLike], [void], 'view'>;

  trustedRegister: TypedContractMethod<[to: AddressLike, recovery: AddressLike, url: string], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'cancelRecovery'): TypedContractMethod<[from: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'changeHome'): TypedContractMethod<[url: string], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'changeRecoveryAddress'
  ): TypedContractMethod<[recovery: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'changeTrustedCaller'
  ): TypedContractMethod<[_trustedCaller: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'completeRecovery'): TypedContractMethod<[from: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'completeTransferOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'disableTrustedOnly'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'idOf'): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'isTrustedForwarder'): TypedContractMethod<[forwarder: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'register'
  ): TypedContractMethod<[to: AddressLike, recovery: AddressLike, url: string], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'requestRecovery'
  ): TypedContractMethod<[from: AddressLike, to: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'requestTransferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transfer'): TypedContractMethod<[to: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[arg0: AddressLike], [void], 'view'>;
  getFunction(
    nameOrSignature: 'trustedRegister'
  ): TypedContractMethod<[to: AddressLike, recovery: AddressLike, url: string], [void], 'nonpayable'>;

  getEvent(
    key: 'CancelRecovery'
  ): TypedContractEvent<
    CancelRecoveryEvent.InputTuple,
    CancelRecoveryEvent.OutputTuple,
    CancelRecoveryEvent.OutputObject
  >;
  getEvent(
    key: 'ChangeHome'
  ): TypedContractEvent<ChangeHomeEvent.InputTuple, ChangeHomeEvent.OutputTuple, ChangeHomeEvent.OutputObject>;
  getEvent(
    key: 'ChangeRecoveryAddress'
  ): TypedContractEvent<
    ChangeRecoveryAddressEvent.InputTuple,
    ChangeRecoveryAddressEvent.OutputTuple,
    ChangeRecoveryAddressEvent.OutputObject
  >;
  getEvent(
    key: 'ChangeTrustedCaller'
  ): TypedContractEvent<
    ChangeTrustedCallerEvent.InputTuple,
    ChangeTrustedCallerEvent.OutputTuple,
    ChangeTrustedCallerEvent.OutputObject
  >;
  getEvent(
    key: 'DisableTrustedOnly'
  ): TypedContractEvent<
    DisableTrustedOnlyEvent.InputTuple,
    DisableTrustedOnlyEvent.OutputTuple,
    DisableTrustedOnlyEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Register'
  ): TypedContractEvent<RegisterEvent.InputTuple, RegisterEvent.OutputTuple, RegisterEvent.OutputObject>;
  getEvent(
    key: 'RequestRecovery'
  ): TypedContractEvent<
    RequestRecoveryEvent.InputTuple,
    RequestRecoveryEvent.OutputTuple,
    RequestRecoveryEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

  filters: {
    'CancelRecovery(address,uint256)': TypedContractEvent<
      CancelRecoveryEvent.InputTuple,
      CancelRecoveryEvent.OutputTuple,
      CancelRecoveryEvent.OutputObject
    >;
    CancelRecovery: TypedContractEvent<
      CancelRecoveryEvent.InputTuple,
      CancelRecoveryEvent.OutputTuple,
      CancelRecoveryEvent.OutputObject
    >;

    'ChangeHome(uint256,string)': TypedContractEvent<
      ChangeHomeEvent.InputTuple,
      ChangeHomeEvent.OutputTuple,
      ChangeHomeEvent.OutputObject
    >;
    ChangeHome: TypedContractEvent<
      ChangeHomeEvent.InputTuple,
      ChangeHomeEvent.OutputTuple,
      ChangeHomeEvent.OutputObject
    >;

    'ChangeRecoveryAddress(uint256,address)': TypedContractEvent<
      ChangeRecoveryAddressEvent.InputTuple,
      ChangeRecoveryAddressEvent.OutputTuple,
      ChangeRecoveryAddressEvent.OutputObject
    >;
    ChangeRecoveryAddress: TypedContractEvent<
      ChangeRecoveryAddressEvent.InputTuple,
      ChangeRecoveryAddressEvent.OutputTuple,
      ChangeRecoveryAddressEvent.OutputObject
    >;

    'ChangeTrustedCaller(address)': TypedContractEvent<
      ChangeTrustedCallerEvent.InputTuple,
      ChangeTrustedCallerEvent.OutputTuple,
      ChangeTrustedCallerEvent.OutputObject
    >;
    ChangeTrustedCaller: TypedContractEvent<
      ChangeTrustedCallerEvent.InputTuple,
      ChangeTrustedCallerEvent.OutputTuple,
      ChangeTrustedCallerEvent.OutputObject
    >;

    'DisableTrustedOnly()': TypedContractEvent<
      DisableTrustedOnlyEvent.InputTuple,
      DisableTrustedOnlyEvent.OutputTuple,
      DisableTrustedOnlyEvent.OutputObject
    >;
    DisableTrustedOnly: TypedContractEvent<
      DisableTrustedOnlyEvent.InputTuple,
      DisableTrustedOnlyEvent.OutputTuple,
      DisableTrustedOnlyEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Register(address,uint256,address,string)': TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;
    Register: TypedContractEvent<RegisterEvent.InputTuple, RegisterEvent.OutputTuple, RegisterEvent.OutputObject>;

    'RequestRecovery(address,address,uint256)': TypedContractEvent<
      RequestRecoveryEvent.InputTuple,
      RequestRecoveryEvent.OutputTuple,
      RequestRecoveryEvent.OutputObject
    >;
    RequestRecovery: TypedContractEvent<
      RequestRecoveryEvent.InputTuple,
      RequestRecoveryEvent.OutputTuple,
      RequestRecoveryEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
  };
}
